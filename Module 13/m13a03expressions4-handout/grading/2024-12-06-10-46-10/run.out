'Expression' is an interface
    -> true
'Constant' directly implements/extends interface 'Expression'...
    -> true
Class 'Constant' has a public constructor with argument types (double)... 
    -> true
Class 'Constant' only has private fields...
    -> true
'BinaryOperation' directly implements/extends interface 'Expression'...
    -> true
Class 'BinaryOperation' is an abstract class
    -> true
Class 'Addition' directly extends class 'BinaryOperation'...
    -> true
Class 'Addition' has a public constructor with argument types (Expression, Expression)... 
    -> true
Class 'Addition' only has private fields...
    -> true
Class 'Subtraction' directly extends class 'BinaryOperation'...
    -> true
Class 'Subtraction' has a public constructor with argument types (Expression, Expression)... 
    -> true
Class 'Subtraction' only has private fields...
    -> true
Class 'Multiplication' directly extends class 'BinaryOperation'...
    -> true
Class 'Multiplication' has a public constructor with argument types (Expression, Expression)... 
    -> true
Class 'Multiplication' only has private fields...
    -> true
Class 'Division' directly extends class 'BinaryOperation'...
    -> true
Class 'Division' has a public constructor with argument types (Expression, Expression)... 
    -> true
Class 'Division' only has private fields...
    -> true
'UnaryOperation' directly implements/extends interface 'Expression'...
    -> true
Class 'UnaryOperation' is an abstract class
    -> true
Class 'Minus' directly extends class 'UnaryOperation'...
    -> true
Class 'Minus' has a public constructor with argument types (Expression)... 
    -> true
Class 'Minus' only has private fields...
    -> true
Class 'AbsoluteValue' directly extends class 'UnaryOperation'...
    -> true
Class 'AbsoluteValue' has a public constructor with argument types (Expression)... 
    -> true
Class 'AbsoluteValue' only has private fields...
    -> true
Class 'SquareRoot' directly extends class 'UnaryOperation'...
    -> true
Class 'SquareRoot' has a public constructor with argument types (Expression)... 
    -> true
Class 'SquareRoot' only has private fields...
    -> true
'Variable' directly implements/extends interface 'Expression'...
    -> true
Class 'Variable' has a public constructor with argument types (String)... 
    -> true
Class 'Variable' only has private fields...
    -> false
